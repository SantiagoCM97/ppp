Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    NOTEQUAL
    LT
    COLON
    GT
    PERCENT
    AND
    OR

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMICOLON programVars programFunc main
Rule 2     programVars -> vars
Rule 3     programVars -> <empty>
Rule 4     programFunc -> function programFunc
Rule 5     programFunc -> <empty>
Rule 6     main -> MAIN LEFTPAR RIGHTPAR LEFTBRACE statement RIGHTBRACE
Rule 7     assignment -> ID EQUAL exp SEMICOLON
Rule 8     declaration -> VAR declarationPrim
Rule 9     declarationPrim -> primitive vars SEMICOLON declarationPrim
Rule 10    declarationPrim -> <empty>
Rule 11    primitive -> INT
Rule 12    primitive -> FLOAT
Rule 13    primitive -> CHAR
Rule 14    return -> RETURN LEFTPAR exp RIGHTPAR
Rule 15    if -> IF LEFTPAR exp RIGHTPAR THEN LEFTBRACE statement RIGHTBRACE ifElse
Rule 16    ifElse -> ELSE LEFTBRACE statement RIGHTBRACE
Rule 17    ifElse -> <empty>
Rule 18    comment -> COMMENT_TEXT
Rule 19    while -> WHILE LEFTPAR exp RIGHTPAR DO statement
Rule 20    for -> FOR declaration TO exp DO statement
Rule 21    vars -> ID varsArray SEMICOLON
Rule 22    varsComa -> COMA vars
Rule 23    varsComa -> <empty>
Rule 24    varsArray -> LEFTBRACK CST_INT RIGHTBRACK varsMatrix
Rule 25    varsArray -> varsComa
Rule 26    varsMatrix -> LEFTBRACK CST_INT RIGHTBRACK
Rule 27    varsMatrix -> varsComa
Rule 28    function -> functionType LEFTPAR param RIGHTPAR SEMICOLON LEFTBRACE statement RIGHTBRACE
Rule 29    function -> functionType LEFTPAR RIGHTPAR SEMICOLON LEFTBRACE statement RIGHTBRACE
Rule 30    functionType -> FUNCTION primitive
Rule 31    functionType -> FUNCTION VOID
Rule 32    param -> primitive ID functionParam
Rule 33    functionParam -> COMA param
Rule 34    functionParam -> <empty>
Rule 35    cst_prim -> CST_INT
Rule 36    cst_prim -> CST_FLOAT
Rule 37    cst_prim -> CST_CHAR
Rule 38    factor -> LEFTPAR exp RIGHTPAR
Rule 39    factor -> cst_prim
Rule 40    factor -> module
Rule 41    factor -> ID
Rule 42    term -> factor termFunction
Rule 43    term -> factor
Rule 44    termFunction -> MULTIPLY term
Rule 45    termFunction -> DIVIDE term
Rule 46    termFunction -> <empty>
Rule 47    exp -> term expFunction
Rule 48    exp -> term
Rule 49    expFunction -> PLUS exp
Rule 50    expFunction -> MINUS exp
Rule 51    expFunction -> <empty>
Rule 52    read -> READ LEFTPAR id_list RIGHTPAR
Rule 53    id_list -> ID id_listFunction
Rule 54    id_listFunction -> COMA id_list
Rule 55    id_listFunction -> <empty>
Rule 56    print -> PRINT LEFTPAR printFunction RIGHTPAR
Rule 57    printFunction -> print_param COMA printFunction2
Rule 58    printFunction -> print_param
Rule 59    printFunction2 -> printFunction
Rule 60    print_param -> exp
Rule 61    print_param -> CST_STRING
Rule 62    print_param -> ID
Rule 63    statement -> return
Rule 64    statement -> if statementFunction
Rule 65    statement -> comment statementFunction
Rule 66    statement -> read statementFunction
Rule 67    statement -> print statementFunction
Rule 68    statement -> assignment statementFunction
Rule 69    statement -> declaration statementFunction
Rule 70    statement -> module statementFunction
Rule 71    statementFunction -> statement
Rule 72    module -> ID LEFTPAR moduleFunction
Rule 73    moduleFunction -> ID COMA moduleFunction
Rule 74    moduleFunction -> ID RIGHTPAR
Rule 75    moduleFunction -> exp COMA moduleFunction
Rule 76    moduleFunction -> exp RIGHTPAR

Terminals, with rules where they appear

AND                  : 
CHAR                 : 13
COLON                : 
COMA                 : 22 33 54 57 73 75
COMMENT_TEXT         : 18
CST_CHAR             : 37
CST_FLOAT            : 36
CST_INT              : 24 26 35
CST_STRING           : 61
DIVIDE               : 45
DO                   : 19 20
ELSE                 : 16
EQUAL                : 7
FLOAT                : 12
FOR                  : 20
FUNCTION             : 30 31
GT                   : 
ID                   : 1 7 21 32 41 53 62 72 73 74
IF                   : 15
INT                  : 11
LEFTBRACE            : 6 15 16 28 29
LEFTBRACK            : 24 26
LEFTPAR              : 6 14 15 19 28 29 38 52 56 72
LT                   : 
MAIN                 : 6
MINUS                : 50
MULTIPLY             : 44
NOTEQUAL             : 
OR                   : 
PERCENT              : 
PLUS                 : 49
PRINT                : 56
PROGRAM              : 1
READ                 : 52
RETURN               : 14
RIGHTBRACE           : 6 15 16 28 29
RIGHTBRACK           : 24 26
RIGHTPAR             : 6 14 15 19 28 29 38 52 56 74 76
SEMICOLON            : 1 7 9 21 28 29
THEN                 : 15
TO                   : 20
VAR                  : 8
VOID                 : 31
WHILE                : 19
error                : 

Nonterminals, with rules where they appear

assignment           : 68
comment              : 65
cst_prim             : 39
declaration          : 20 69
declarationPrim      : 8 9
exp                  : 7 14 15 19 20 38 49 50 60 75 76
expFunction          : 47
factor               : 42 43
for                  : 
function             : 4
functionParam        : 32
functionType         : 28 29
id_list              : 52 54
id_listFunction      : 53
if                   : 64
ifElse               : 15
main                 : 1
module               : 40 70
moduleFunction       : 72 73 75
param                : 28 33
primitive            : 9 30 32
print                : 67
printFunction        : 56 59
printFunction2       : 57
print_param          : 57 58
program              : 0
programFunc          : 1 4
programVars          : 1
read                 : 66
return               : 63
statement            : 6 15 16 19 20 28 29 71
statementFunction    : 64 65 66 67 68 69 70
term                 : 44 45 47 48
termFunction         : 42
vars                 : 2 9 22
varsArray            : 21
varsComa             : 25 27
varsMatrix           : 24
while                : 

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SEMICOLON programVars programFunc main

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID SEMICOLON programVars programFunc main

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . SEMICOLON programVars programFunc main

    SEMICOLON       shift and go to state 4


state 4

    (1) program -> PROGRAM ID SEMICOLON . programVars programFunc main
    (2) programVars -> . vars
    (3) programVars -> .
    (21) vars -> . ID varsArray SEMICOLON

    FUNCTION        reduce using rule 3 (programVars -> .)
    MAIN            reduce using rule 3 (programVars -> .)
    ID              shift and go to state 6

    programVars                    shift and go to state 7
    vars                           shift and go to state 5

state 5

    (2) programVars -> vars .

    FUNCTION        reduce using rule 2 (programVars -> vars .)
    MAIN            reduce using rule 2 (programVars -> vars .)


state 6

    (21) vars -> ID . varsArray SEMICOLON
    (24) varsArray -> . LEFTBRACK CST_INT RIGHTBRACK varsMatrix
    (25) varsArray -> . varsComa
    (22) varsComa -> . COMA vars
    (23) varsComa -> .

    LEFTBRACK       shift and go to state 8
    COMA            shift and go to state 11
    SEMICOLON       reduce using rule 23 (varsComa -> .)

    varsArray                      shift and go to state 9
    varsComa                       shift and go to state 10

state 7

    (1) program -> PROGRAM ID SEMICOLON programVars . programFunc main
    (4) programFunc -> . function programFunc
    (5) programFunc -> .
    (28) function -> . functionType LEFTPAR param RIGHTPAR SEMICOLON LEFTBRACE statement RIGHTBRACE
    (29) function -> . functionType LEFTPAR RIGHTPAR SEMICOLON LEFTBRACE statement RIGHTBRACE
    (30) functionType -> . FUNCTION primitive
    (31) functionType -> . FUNCTION VOID

    MAIN            reduce using rule 5 (programFunc -> .)
    FUNCTION        shift and go to state 13

    function                       shift and go to state 12
    functionType                   shift and go to state 15
    programFunc                    shift and go to state 14

state 8

    (24) varsArray -> LEFTBRACK . CST_INT RIGHTBRACK varsMatrix

    CST_INT         shift and go to state 16


state 9

    (21) vars -> ID varsArray . SEMICOLON

    SEMICOLON       shift and go to state 17


state 10

    (25) varsArray -> varsComa .

    SEMICOLON       reduce using rule 25 (varsArray -> varsComa .)


state 11

    (22) varsComa -> COMA . vars
    (21) vars -> . ID varsArray SEMICOLON

    ID              shift and go to state 6

    vars                           shift and go to state 18

state 12

    (4) programFunc -> function . programFunc
    (4) programFunc -> . function programFunc
    (5) programFunc -> .
    (28) function -> . functionType LEFTPAR param RIGHTPAR SEMICOLON LEFTBRACE statement RIGHTBRACE
    (29) function -> . functionType LEFTPAR RIGHTPAR SEMICOLON LEFTBRACE statement RIGHTBRACE
    (30) functionType -> . FUNCTION primitive
    (31) functionType -> . FUNCTION VOID

    MAIN            reduce using rule 5 (programFunc -> .)
    FUNCTION        shift and go to state 13

    function                       shift and go to state 12
    programFunc                    shift and go to state 19
    functionType                   shift and go to state 15

state 13

    (30) functionType -> FUNCTION . primitive
    (31) functionType -> FUNCTION . VOID
    (11) primitive -> . INT
    (12) primitive -> . FLOAT
    (13) primitive -> . CHAR

    VOID            shift and go to state 22
    INT             shift and go to state 21
    FLOAT           shift and go to state 23
    CHAR            shift and go to state 24

    primitive                      shift and go to state 20

state 14

    (1) program -> PROGRAM ID SEMICOLON programVars programFunc . main
    (6) main -> . MAIN LEFTPAR RIGHTPAR LEFTBRACE statement RIGHTBRACE

    MAIN            shift and go to state 25

    main                           shift and go to state 26

state 15

    (28) function -> functionType . LEFTPAR param RIGHTPAR SEMICOLON LEFTBRACE statement RIGHTBRACE
    (29) function -> functionType . LEFTPAR RIGHTPAR SEMICOLON LEFTBRACE statement RIGHTBRACE

    LEFTPAR         shift and go to state 27


state 16

    (24) varsArray -> LEFTBRACK CST_INT . RIGHTBRACK varsMatrix

    RIGHTBRACK      shift and go to state 28


state 17

    (21) vars -> ID varsArray SEMICOLON .

    FUNCTION        reduce using rule 21 (vars -> ID varsArray SEMICOLON .)
    MAIN            reduce using rule 21 (vars -> ID varsArray SEMICOLON .)
    SEMICOLON       reduce using rule 21 (vars -> ID varsArray SEMICOLON .)


state 18

    (22) varsComa -> COMA vars .

    SEMICOLON       reduce using rule 22 (varsComa -> COMA vars .)


state 19

    (4) programFunc -> function programFunc .

    MAIN            reduce using rule 4 (programFunc -> function programFunc .)


state 20

    (30) functionType -> FUNCTION primitive .

    LEFTPAR         reduce using rule 30 (functionType -> FUNCTION primitive .)


state 21

    (11) primitive -> INT .

    ID              reduce using rule 11 (primitive -> INT .)
    LEFTPAR         reduce using rule 11 (primitive -> INT .)


state 22

    (31) functionType -> FUNCTION VOID .

    LEFTPAR         reduce using rule 31 (functionType -> FUNCTION VOID .)


state 23

    (12) primitive -> FLOAT .

    ID              reduce using rule 12 (primitive -> FLOAT .)
    LEFTPAR         reduce using rule 12 (primitive -> FLOAT .)


state 24

    (13) primitive -> CHAR .

    ID              reduce using rule 13 (primitive -> CHAR .)
    LEFTPAR         reduce using rule 13 (primitive -> CHAR .)


state 25

    (6) main -> MAIN . LEFTPAR RIGHTPAR LEFTBRACE statement RIGHTBRACE

    LEFTPAR         shift and go to state 29


state 26

    (1) program -> PROGRAM ID SEMICOLON programVars programFunc main .

    $end            reduce using rule 1 (program -> PROGRAM ID SEMICOLON programVars programFunc main .)


state 27

    (28) function -> functionType LEFTPAR . param RIGHTPAR SEMICOLON LEFTBRACE statement RIGHTBRACE
    (29) function -> functionType LEFTPAR . RIGHTPAR SEMICOLON LEFTBRACE statement RIGHTBRACE
    (32) param -> . primitive ID functionParam
    (11) primitive -> . INT
    (12) primitive -> . FLOAT
    (13) primitive -> . CHAR

    RIGHTPAR        shift and go to state 32
    INT             shift and go to state 21
    FLOAT           shift and go to state 23
    CHAR            shift and go to state 24

    primitive                      shift and go to state 30
    param                          shift and go to state 31

state 28

    (24) varsArray -> LEFTBRACK CST_INT RIGHTBRACK . varsMatrix
    (26) varsMatrix -> . LEFTBRACK CST_INT RIGHTBRACK
    (27) varsMatrix -> . varsComa
    (22) varsComa -> . COMA vars
    (23) varsComa -> .

    LEFTBRACK       shift and go to state 33
    COMA            shift and go to state 11
    SEMICOLON       reduce using rule 23 (varsComa -> .)

    varsMatrix                     shift and go to state 35
    varsComa                       shift and go to state 34

state 29

    (6) main -> MAIN LEFTPAR . RIGHTPAR LEFTBRACE statement RIGHTBRACE

    RIGHTPAR        shift and go to state 36


state 30

    (32) param -> primitive . ID functionParam

    ID              shift and go to state 37


state 31

    (28) function -> functionType LEFTPAR param . RIGHTPAR SEMICOLON LEFTBRACE statement RIGHTBRACE

    RIGHTPAR        shift and go to state 38


state 32

    (29) function -> functionType LEFTPAR RIGHTPAR . SEMICOLON LEFTBRACE statement RIGHTBRACE

    SEMICOLON       shift and go to state 39


state 33

    (26) varsMatrix -> LEFTBRACK . CST_INT RIGHTBRACK

    CST_INT         shift and go to state 40


state 34

    (27) varsMatrix -> varsComa .

    SEMICOLON       reduce using rule 27 (varsMatrix -> varsComa .)


state 35

    (24) varsArray -> LEFTBRACK CST_INT RIGHTBRACK varsMatrix .

    SEMICOLON       reduce using rule 24 (varsArray -> LEFTBRACK CST_INT RIGHTBRACK varsMatrix .)


state 36

    (6) main -> MAIN LEFTPAR RIGHTPAR . LEFTBRACE statement RIGHTBRACE

    LEFTBRACE       shift and go to state 41


state 37

    (32) param -> primitive ID . functionParam
    (33) functionParam -> . COMA param
    (34) functionParam -> .

    COMA            shift and go to state 42
    RIGHTPAR        reduce using rule 34 (functionParam -> .)

    functionParam                  shift and go to state 43

state 38

    (28) function -> functionType LEFTPAR param RIGHTPAR . SEMICOLON LEFTBRACE statement RIGHTBRACE

    SEMICOLON       shift and go to state 44


state 39

    (29) function -> functionType LEFTPAR RIGHTPAR SEMICOLON . LEFTBRACE statement RIGHTBRACE

    LEFTBRACE       shift and go to state 45


state 40

    (26) varsMatrix -> LEFTBRACK CST_INT . RIGHTBRACK

    RIGHTBRACK      shift and go to state 46


state 41

    (6) main -> MAIN LEFTPAR RIGHTPAR LEFTBRACE . statement RIGHTBRACE
    (63) statement -> . return
    (64) statement -> . if statementFunction
    (65) statement -> . comment statementFunction
    (66) statement -> . read statementFunction
    (67) statement -> . print statementFunction
    (68) statement -> . assignment statementFunction
    (69) statement -> . declaration statementFunction
    (70) statement -> . module statementFunction
    (14) return -> . RETURN LEFTPAR exp RIGHTPAR
    (15) if -> . IF LEFTPAR exp RIGHTPAR THEN LEFTBRACE statement RIGHTBRACE ifElse
    (18) comment -> . COMMENT_TEXT
    (52) read -> . READ LEFTPAR id_list RIGHTPAR
    (56) print -> . PRINT LEFTPAR printFunction RIGHTPAR
    (7) assignment -> . ID EQUAL exp SEMICOLON
    (8) declaration -> . VAR declarationPrim
    (72) module -> . ID LEFTPAR moduleFunction

    RETURN          shift and go to state 48
    IF              shift and go to state 62
    COMMENT_TEXT    shift and go to state 53
    READ            shift and go to state 49
    PRINT           shift and go to state 51
    ID              shift and go to state 61
    VAR             shift and go to state 60

    comment                        shift and go to state 47
    return                         shift and go to state 56
    read                           shift and go to state 57
    assignment                     shift and go to state 58
    module                         shift and go to state 50
    statement                      shift and go to state 54
    declaration                    shift and go to state 59
    print                          shift and go to state 55
    if                             shift and go to state 52

state 42

    (33) functionParam -> COMA . param
    (32) param -> . primitive ID functionParam
    (11) primitive -> . INT
    (12) primitive -> . FLOAT
    (13) primitive -> . CHAR

    INT             shift and go to state 21
    FLOAT           shift and go to state 23
    CHAR            shift and go to state 24

    primitive                      shift and go to state 30
    param                          shift and go to state 63

state 43

    (32) param -> primitive ID functionParam .

    RIGHTPAR        reduce using rule 32 (param -> primitive ID functionParam .)


state 44

    (28) function -> functionType LEFTPAR param RIGHTPAR SEMICOLON . LEFTBRACE statement RIGHTBRACE

    LEFTBRACE       shift and go to state 64


state 45

    (29) function -> functionType LEFTPAR RIGHTPAR SEMICOLON LEFTBRACE . statement RIGHTBRACE
    (63) statement -> . return
    (64) statement -> . if statementFunction
    (65) statement -> . comment statementFunction
    (66) statement -> . read statementFunction
    (67) statement -> . print statementFunction
    (68) statement -> . assignment statementFunction
    (69) statement -> . declaration statementFunction
    (70) statement -> . module statementFunction
    (14) return -> . RETURN LEFTPAR exp RIGHTPAR
    (15) if -> . IF LEFTPAR exp RIGHTPAR THEN LEFTBRACE statement RIGHTBRACE ifElse
    (18) comment -> . COMMENT_TEXT
    (52) read -> . READ LEFTPAR id_list RIGHTPAR
    (56) print -> . PRINT LEFTPAR printFunction RIGHTPAR
    (7) assignment -> . ID EQUAL exp SEMICOLON
    (8) declaration -> . VAR declarationPrim
    (72) module -> . ID LEFTPAR moduleFunction

    RETURN          shift and go to state 48
    IF              shift and go to state 62
    COMMENT_TEXT    shift and go to state 53
    READ            shift and go to state 49
    PRINT           shift and go to state 51
    ID              shift and go to state 61
    VAR             shift and go to state 60

    comment                        shift and go to state 47
    return                         shift and go to state 56
    read                           shift and go to state 57
    assignment                     shift and go to state 58
    module                         shift and go to state 50
    statement                      shift and go to state 65
    declaration                    shift and go to state 59
    print                          shift and go to state 55
    if                             shift and go to state 52

state 46

    (26) varsMatrix -> LEFTBRACK CST_INT RIGHTBRACK .

    SEMICOLON       reduce using rule 26 (varsMatrix -> LEFTBRACK CST_INT RIGHTBRACK .)


state 47

    (65) statement -> comment . statementFunction
    (71) statementFunction -> . statement
    (63) statement -> . return
    (64) statement -> . if statementFunction
    (65) statement -> . comment statementFunction
    (66) statement -> . read statementFunction
    (67) statement -> . print statementFunction
    (68) statement -> . assignment statementFunction
    (69) statement -> . declaration statementFunction
    (70) statement -> . module statementFunction
    (14) return -> . RETURN LEFTPAR exp RIGHTPAR
    (15) if -> . IF LEFTPAR exp RIGHTPAR THEN LEFTBRACE statement RIGHTBRACE ifElse
    (18) comment -> . COMMENT_TEXT
    (52) read -> . READ LEFTPAR id_list RIGHTPAR
    (56) print -> . PRINT LEFTPAR printFunction RIGHTPAR
    (7) assignment -> . ID EQUAL exp SEMICOLON
    (8) declaration -> . VAR declarationPrim
    (72) module -> . ID LEFTPAR moduleFunction

    RETURN          shift and go to state 48
    IF              shift and go to state 62
    COMMENT_TEXT    shift and go to state 53
    READ            shift and go to state 49
    PRINT           shift and go to state 51
    ID              shift and go to state 61
    VAR             shift and go to state 60

    comment                        shift and go to state 47
    return                         shift and go to state 56
    read                           shift and go to state 57
    assignment                     shift and go to state 58
    statementFunction              shift and go to state 66
    module                         shift and go to state 50
    statement                      shift and go to state 67
    declaration                    shift and go to state 59
    print                          shift and go to state 55
    if                             shift and go to state 52

state 48

    (14) return -> RETURN . LEFTPAR exp RIGHTPAR

    LEFTPAR         shift and go to state 68


state 49

    (52) read -> READ . LEFTPAR id_list RIGHTPAR

    LEFTPAR         shift and go to state 69


state 50

    (70) statement -> module . statementFunction
    (71) statementFunction -> . statement
    (63) statement -> . return
    (64) statement -> . if statementFunction
    (65) statement -> . comment statementFunction
    (66) statement -> . read statementFunction
    (67) statement -> . print statementFunction
    (68) statement -> . assignment statementFunction
    (69) statement -> . declaration statementFunction
    (70) statement -> . module statementFunction
    (14) return -> . RETURN LEFTPAR exp RIGHTPAR
    (15) if -> . IF LEFTPAR exp RIGHTPAR THEN LEFTBRACE statement RIGHTBRACE ifElse
    (18) comment -> . COMMENT_TEXT
    (52) read -> . READ LEFTPAR id_list RIGHTPAR
    (56) print -> . PRINT LEFTPAR printFunction RIGHTPAR
    (7) assignment -> . ID EQUAL exp SEMICOLON
    (8) declaration -> . VAR declarationPrim
    (72) module -> . ID LEFTPAR moduleFunction

    RETURN          shift and go to state 48
    IF              shift and go to state 62
    COMMENT_TEXT    shift and go to state 53
    READ            shift and go to state 49
    PRINT           shift and go to state 51
    ID              shift and go to state 61
    VAR             shift and go to state 60

    comment                        shift and go to state 47
    return                         shift and go to state 56
    read                           shift and go to state 57
    assignment                     shift and go to state 58
    statementFunction              shift and go to state 70
    module                         shift and go to state 50
    statement                      shift and go to state 67
    declaration                    shift and go to state 59
    print                          shift and go to state 55
    if                             shift and go to state 52

state 51

    (56) print -> PRINT . LEFTPAR printFunction RIGHTPAR

    LEFTPAR         shift and go to state 71


state 52

    (64) statement -> if . statementFunction
    (71) statementFunction -> . statement
    (63) statement -> . return
    (64) statement -> . if statementFunction
    (65) statement -> . comment statementFunction
    (66) statement -> . read statementFunction
    (67) statement -> . print statementFunction
    (68) statement -> . assignment statementFunction
    (69) statement -> . declaration statementFunction
    (70) statement -> . module statementFunction
    (14) return -> . RETURN LEFTPAR exp RIGHTPAR
    (15) if -> . IF LEFTPAR exp RIGHTPAR THEN LEFTBRACE statement RIGHTBRACE ifElse
    (18) comment -> . COMMENT_TEXT
    (52) read -> . READ LEFTPAR id_list RIGHTPAR
    (56) print -> . PRINT LEFTPAR printFunction RIGHTPAR
    (7) assignment -> . ID EQUAL exp SEMICOLON
    (8) declaration -> . VAR declarationPrim
    (72) module -> . ID LEFTPAR moduleFunction

    RETURN          shift and go to state 48
    IF              shift and go to state 62
    COMMENT_TEXT    shift and go to state 53
    READ            shift and go to state 49
    PRINT           shift and go to state 51
    ID              shift and go to state 61
    VAR             shift and go to state 60

    comment                        shift and go to state 47
    return                         shift and go to state 56
    read                           shift and go to state 57
    assignment                     shift and go to state 58
    statementFunction              shift and go to state 72
    module                         shift and go to state 50
    statement                      shift and go to state 67
    declaration                    shift and go to state 59
    print                          shift and go to state 55
    if                             shift and go to state 52

state 53

    (18) comment -> COMMENT_TEXT .

    RETURN          reduce using rule 18 (comment -> COMMENT_TEXT .)
    IF              reduce using rule 18 (comment -> COMMENT_TEXT .)
    COMMENT_TEXT    reduce using rule 18 (comment -> COMMENT_TEXT .)
    READ            reduce using rule 18 (comment -> COMMENT_TEXT .)
    PRINT           reduce using rule 18 (comment -> COMMENT_TEXT .)
    ID              reduce using rule 18 (comment -> COMMENT_TEXT .)
    VAR             reduce using rule 18 (comment -> COMMENT_TEXT .)


state 54

    (6) main -> MAIN LEFTPAR RIGHTPAR LEFTBRACE statement . RIGHTBRACE

    RIGHTBRACE      shift and go to state 73


state 55

    (67) statement -> print . statementFunction
    (71) statementFunction -> . statement
    (63) statement -> . return
    (64) statement -> . if statementFunction
    (65) statement -> . comment statementFunction
    (66) statement -> . read statementFunction
    (67) statement -> . print statementFunction
    (68) statement -> . assignment statementFunction
    (69) statement -> . declaration statementFunction
    (70) statement -> . module statementFunction
    (14) return -> . RETURN LEFTPAR exp RIGHTPAR
    (15) if -> . IF LEFTPAR exp RIGHTPAR THEN LEFTBRACE statement RIGHTBRACE ifElse
    (18) comment -> . COMMENT_TEXT
    (52) read -> . READ LEFTPAR id_list RIGHTPAR
    (56) print -> . PRINT LEFTPAR printFunction RIGHTPAR
    (7) assignment -> . ID EQUAL exp SEMICOLON
    (8) declaration -> . VAR declarationPrim
    (72) module -> . ID LEFTPAR moduleFunction

    RETURN          shift and go to state 48
    IF              shift and go to state 62
    COMMENT_TEXT    shift and go to state 53
    READ            shift and go to state 49
    PRINT           shift and go to state 51
    ID              shift and go to state 61
    VAR             shift and go to state 60

    comment                        shift and go to state 47
    return                         shift and go to state 56
    read                           shift and go to state 57
    assignment                     shift and go to state 58
    statementFunction              shift and go to state 74
    module                         shift and go to state 50
    statement                      shift and go to state 67
    declaration                    shift and go to state 59
    print                          shift and go to state 55
    if                             shift and go to state 52

state 56

    (63) statement -> return .

    RIGHTBRACE      reduce using rule 63 (statement -> return .)


state 57

    (66) statement -> read . statementFunction
    (71) statementFunction -> . statement
    (63) statement -> . return
    (64) statement -> . if statementFunction
    (65) statement -> . comment statementFunction
    (66) statement -> . read statementFunction
    (67) statement -> . print statementFunction
    (68) statement -> . assignment statementFunction
    (69) statement -> . declaration statementFunction
    (70) statement -> . module statementFunction
    (14) return -> . RETURN LEFTPAR exp RIGHTPAR
    (15) if -> . IF LEFTPAR exp RIGHTPAR THEN LEFTBRACE statement RIGHTBRACE ifElse
    (18) comment -> . COMMENT_TEXT
    (52) read -> . READ LEFTPAR id_list RIGHTPAR
    (56) print -> . PRINT LEFTPAR printFunction RIGHTPAR
    (7) assignment -> . ID EQUAL exp SEMICOLON
    (8) declaration -> . VAR declarationPrim
    (72) module -> . ID LEFTPAR moduleFunction

    RETURN          shift and go to state 48
    IF              shift and go to state 62
    COMMENT_TEXT    shift and go to state 53
    READ            shift and go to state 49
    PRINT           shift and go to state 51
    ID              shift and go to state 61
    VAR             shift and go to state 60

    comment                        shift and go to state 47
    return                         shift and go to state 56
    read                           shift and go to state 57
    assignment                     shift and go to state 58
    statementFunction              shift and go to state 75
    module                         shift and go to state 50
    statement                      shift and go to state 67
    declaration                    shift and go to state 59
    print                          shift and go to state 55
    if                             shift and go to state 52

state 58

    (68) statement -> assignment . statementFunction
    (71) statementFunction -> . statement
    (63) statement -> . return
    (64) statement -> . if statementFunction
    (65) statement -> . comment statementFunction
    (66) statement -> . read statementFunction
    (67) statement -> . print statementFunction
    (68) statement -> . assignment statementFunction
    (69) statement -> . declaration statementFunction
    (70) statement -> . module statementFunction
    (14) return -> . RETURN LEFTPAR exp RIGHTPAR
    (15) if -> . IF LEFTPAR exp RIGHTPAR THEN LEFTBRACE statement RIGHTBRACE ifElse
    (18) comment -> . COMMENT_TEXT
    (52) read -> . READ LEFTPAR id_list RIGHTPAR
    (56) print -> . PRINT LEFTPAR printFunction RIGHTPAR
    (7) assignment -> . ID EQUAL exp SEMICOLON
    (8) declaration -> . VAR declarationPrim
    (72) module -> . ID LEFTPAR moduleFunction

    RETURN          shift and go to state 48
    IF              shift and go to state 62
    COMMENT_TEXT    shift and go to state 53
    READ            shift and go to state 49
    PRINT           shift and go to state 51
    ID              shift and go to state 61
    VAR             shift and go to state 60

    comment                        shift and go to state 47
    return                         shift and go to state 56
    read                           shift and go to state 57
    assignment                     shift and go to state 58
    statementFunction              shift and go to state 76
    module                         shift and go to state 50
    statement                      shift and go to state 67
    declaration                    shift and go to state 59
    print                          shift and go to state 55
    if                             shift and go to state 52

state 59

    (69) statement -> declaration . statementFunction
    (71) statementFunction -> . statement
    (63) statement -> . return
    (64) statement -> . if statementFunction
    (65) statement -> . comment statementFunction
    (66) statement -> . read statementFunction
    (67) statement -> . print statementFunction
    (68) statement -> . assignment statementFunction
    (69) statement -> . declaration statementFunction
    (70) statement -> . module statementFunction
    (14) return -> . RETURN LEFTPAR exp RIGHTPAR
    (15) if -> . IF LEFTPAR exp RIGHTPAR THEN LEFTBRACE statement RIGHTBRACE ifElse
    (18) comment -> . COMMENT_TEXT
    (52) read -> . READ LEFTPAR id_list RIGHTPAR
    (56) print -> . PRINT LEFTPAR printFunction RIGHTPAR
    (7) assignment -> . ID EQUAL exp SEMICOLON
    (8) declaration -> . VAR declarationPrim
    (72) module -> . ID LEFTPAR moduleFunction

    RETURN          shift and go to state 48
    IF              shift and go to state 62
    COMMENT_TEXT    shift and go to state 53
    READ            shift and go to state 49
    PRINT           shift and go to state 51
    ID              shift and go to state 61
    VAR             shift and go to state 60

    comment                        shift and go to state 47
    return                         shift and go to state 56
    read                           shift and go to state 57
    assignment                     shift and go to state 58
    statementFunction              shift and go to state 77
    module                         shift and go to state 50
    statement                      shift and go to state 67
    declaration                    shift and go to state 59
    print                          shift and go to state 55
    if                             shift and go to state 52

state 60

    (8) declaration -> VAR . declarationPrim
    (9) declarationPrim -> . primitive vars SEMICOLON declarationPrim
    (10) declarationPrim -> .
    (11) primitive -> . INT
    (12) primitive -> . FLOAT
    (13) primitive -> . CHAR

    RETURN          reduce using rule 10 (declarationPrim -> .)
    IF              reduce using rule 10 (declarationPrim -> .)
    COMMENT_TEXT    reduce using rule 10 (declarationPrim -> .)
    READ            reduce using rule 10 (declarationPrim -> .)
    PRINT           reduce using rule 10 (declarationPrim -> .)
    ID              reduce using rule 10 (declarationPrim -> .)
    VAR             reduce using rule 10 (declarationPrim -> .)
    INT             shift and go to state 21
    FLOAT           shift and go to state 23
    CHAR            shift and go to state 24

    primitive                      shift and go to state 78
    declarationPrim                shift and go to state 79

state 61

    (7) assignment -> ID . EQUAL exp SEMICOLON
    (72) module -> ID . LEFTPAR moduleFunction

    EQUAL           shift and go to state 80
    LEFTPAR         shift and go to state 81


state 62

    (15) if -> IF . LEFTPAR exp RIGHTPAR THEN LEFTBRACE statement RIGHTBRACE ifElse

    LEFTPAR         shift and go to state 82


state 63

    (33) functionParam -> COMA param .

    RIGHTPAR        reduce using rule 33 (functionParam -> COMA param .)


state 64

    (28) function -> functionType LEFTPAR param RIGHTPAR SEMICOLON LEFTBRACE . statement RIGHTBRACE
    (63) statement -> . return
    (64) statement -> . if statementFunction
    (65) statement -> . comment statementFunction
    (66) statement -> . read statementFunction
    (67) statement -> . print statementFunction
    (68) statement -> . assignment statementFunction
    (69) statement -> . declaration statementFunction
    (70) statement -> . module statementFunction
    (14) return -> . RETURN LEFTPAR exp RIGHTPAR
    (15) if -> . IF LEFTPAR exp RIGHTPAR THEN LEFTBRACE statement RIGHTBRACE ifElse
    (18) comment -> . COMMENT_TEXT
    (52) read -> . READ LEFTPAR id_list RIGHTPAR
    (56) print -> . PRINT LEFTPAR printFunction RIGHTPAR
    (7) assignment -> . ID EQUAL exp SEMICOLON
    (8) declaration -> . VAR declarationPrim
    (72) module -> . ID LEFTPAR moduleFunction

    RETURN          shift and go to state 48
    IF              shift and go to state 62
    COMMENT_TEXT    shift and go to state 53
    READ            shift and go to state 49
    PRINT           shift and go to state 51
    ID              shift and go to state 61
    VAR             shift and go to state 60

    comment                        shift and go to state 47
    return                         shift and go to state 56
    read                           shift and go to state 57
    assignment                     shift and go to state 58
    module                         shift and go to state 50
    statement                      shift and go to state 83
    declaration                    shift and go to state 59
    print                          shift and go to state 55
    if                             shift and go to state 52

state 65

    (29) function -> functionType LEFTPAR RIGHTPAR SEMICOLON LEFTBRACE statement . RIGHTBRACE

    RIGHTBRACE      shift and go to state 84


state 66

    (65) statement -> comment statementFunction .

    RIGHTBRACE      reduce using rule 65 (statement -> comment statementFunction .)


state 67

    (71) statementFunction -> statement .

    RIGHTBRACE      reduce using rule 71 (statementFunction -> statement .)


state 68

    (14) return -> RETURN LEFTPAR . exp RIGHTPAR
    (47) exp -> . term expFunction
    (48) exp -> . term
    (42) term -> . factor termFunction
    (43) term -> . factor
    (38) factor -> . LEFTPAR exp RIGHTPAR
    (39) factor -> . cst_prim
    (40) factor -> . module
    (41) factor -> . ID
    (35) cst_prim -> . CST_INT
    (36) cst_prim -> . CST_FLOAT
    (37) cst_prim -> . CST_CHAR
    (72) module -> . ID LEFTPAR moduleFunction

    LEFTPAR         shift and go to state 88
    ID              shift and go to state 94
    CST_INT         shift and go to state 93
    CST_FLOAT       shift and go to state 89
    CST_CHAR        shift and go to state 85

    term                           shift and go to state 86
    cst_prim                       shift and go to state 87
    module                         shift and go to state 90
    exp                            shift and go to state 91
    factor                         shift and go to state 92

state 69

    (52) read -> READ LEFTPAR . id_list RIGHTPAR
    (53) id_list -> . ID id_listFunction

    ID              shift and go to state 96

    id_list                        shift and go to state 95

state 70

    (70) statement -> module statementFunction .

    RIGHTBRACE      reduce using rule 70 (statement -> module statementFunction .)


state 71

    (56) print -> PRINT LEFTPAR . printFunction RIGHTPAR
    (57) printFunction -> . print_param COMA printFunction2
    (58) printFunction -> . print_param
    (60) print_param -> . exp
    (61) print_param -> . CST_STRING
    (62) print_param -> . ID
    (47) exp -> . term expFunction
    (48) exp -> . term
    (42) term -> . factor termFunction
    (43) term -> . factor
    (38) factor -> . LEFTPAR exp RIGHTPAR
    (39) factor -> . cst_prim
    (40) factor -> . module
    (41) factor -> . ID
    (35) cst_prim -> . CST_INT
    (36) cst_prim -> . CST_FLOAT
    (37) cst_prim -> . CST_CHAR
    (72) module -> . ID LEFTPAR moduleFunction

    CST_STRING      shift and go to state 98
    ID              shift and go to state 101
    LEFTPAR         shift and go to state 88
    CST_INT         shift and go to state 93
    CST_FLOAT       shift and go to state 89
    CST_CHAR        shift and go to state 85

    printFunction                  shift and go to state 97
    term                           shift and go to state 86
    cst_prim                       shift and go to state 87
    module                         shift and go to state 90
    exp                            shift and go to state 100
    factor                         shift and go to state 92
    print_param                    shift and go to state 99

state 72

    (64) statement -> if statementFunction .

    RIGHTBRACE      reduce using rule 64 (statement -> if statementFunction .)


state 73

    (6) main -> MAIN LEFTPAR RIGHTPAR LEFTBRACE statement RIGHTBRACE .

    $end            reduce using rule 6 (main -> MAIN LEFTPAR RIGHTPAR LEFTBRACE statement RIGHTBRACE .)


state 74

    (67) statement -> print statementFunction .

    RIGHTBRACE      reduce using rule 67 (statement -> print statementFunction .)


state 75

    (66) statement -> read statementFunction .

    RIGHTBRACE      reduce using rule 66 (statement -> read statementFunction .)


state 76

    (68) statement -> assignment statementFunction .

    RIGHTBRACE      reduce using rule 68 (statement -> assignment statementFunction .)


state 77

    (69) statement -> declaration statementFunction .

    RIGHTBRACE      reduce using rule 69 (statement -> declaration statementFunction .)


state 78

    (9) declarationPrim -> primitive . vars SEMICOLON declarationPrim
    (21) vars -> . ID varsArray SEMICOLON

    ID              shift and go to state 6

    vars                           shift and go to state 102

state 79

    (8) declaration -> VAR declarationPrim .

    RETURN          reduce using rule 8 (declaration -> VAR declarationPrim .)
    IF              reduce using rule 8 (declaration -> VAR declarationPrim .)
    COMMENT_TEXT    reduce using rule 8 (declaration -> VAR declarationPrim .)
    READ            reduce using rule 8 (declaration -> VAR declarationPrim .)
    PRINT           reduce using rule 8 (declaration -> VAR declarationPrim .)
    ID              reduce using rule 8 (declaration -> VAR declarationPrim .)
    VAR             reduce using rule 8 (declaration -> VAR declarationPrim .)


state 80

    (7) assignment -> ID EQUAL . exp SEMICOLON
    (47) exp -> . term expFunction
    (48) exp -> . term
    (42) term -> . factor termFunction
    (43) term -> . factor
    (38) factor -> . LEFTPAR exp RIGHTPAR
    (39) factor -> . cst_prim
    (40) factor -> . module
    (41) factor -> . ID
    (35) cst_prim -> . CST_INT
    (36) cst_prim -> . CST_FLOAT
    (37) cst_prim -> . CST_CHAR
    (72) module -> . ID LEFTPAR moduleFunction

    LEFTPAR         shift and go to state 88
    ID              shift and go to state 94
    CST_INT         shift and go to state 93
    CST_FLOAT       shift and go to state 89
    CST_CHAR        shift and go to state 85

    term                           shift and go to state 86
    cst_prim                       shift and go to state 87
    module                         shift and go to state 90
    exp                            shift and go to state 103
    factor                         shift and go to state 92

state 81

    (72) module -> ID LEFTPAR . moduleFunction
    (73) moduleFunction -> . ID COMA moduleFunction
    (74) moduleFunction -> . ID RIGHTPAR
    (75) moduleFunction -> . exp COMA moduleFunction
    (76) moduleFunction -> . exp RIGHTPAR
    (47) exp -> . term expFunction
    (48) exp -> . term
    (42) term -> . factor termFunction
    (43) term -> . factor
    (38) factor -> . LEFTPAR exp RIGHTPAR
    (39) factor -> . cst_prim
    (40) factor -> . module
    (41) factor -> . ID
    (35) cst_prim -> . CST_INT
    (36) cst_prim -> . CST_FLOAT
    (37) cst_prim -> . CST_CHAR
    (72) module -> . ID LEFTPAR moduleFunction

    ID              shift and go to state 105
    LEFTPAR         shift and go to state 88
    CST_INT         shift and go to state 93
    CST_FLOAT       shift and go to state 89
    CST_CHAR        shift and go to state 85

    term                           shift and go to state 86
    module                         shift and go to state 90
    cst_prim                       shift and go to state 87
    moduleFunction                 shift and go to state 106
    exp                            shift and go to state 104
    factor                         shift and go to state 92

state 82

    (15) if -> IF LEFTPAR . exp RIGHTPAR THEN LEFTBRACE statement RIGHTBRACE ifElse
    (47) exp -> . term expFunction
    (48) exp -> . term
    (42) term -> . factor termFunction
    (43) term -> . factor
    (38) factor -> . LEFTPAR exp RIGHTPAR
    (39) factor -> . cst_prim
    (40) factor -> . module
    (41) factor -> . ID
    (35) cst_prim -> . CST_INT
    (36) cst_prim -> . CST_FLOAT
    (37) cst_prim -> . CST_CHAR
    (72) module -> . ID LEFTPAR moduleFunction

    LEFTPAR         shift and go to state 88
    ID              shift and go to state 94
    CST_INT         shift and go to state 93
    CST_FLOAT       shift and go to state 89
    CST_CHAR        shift and go to state 85

    term                           shift and go to state 86
    exp                            shift and go to state 107
    cst_prim                       shift and go to state 87
    module                         shift and go to state 90
    factor                         shift and go to state 92

state 83

    (28) function -> functionType LEFTPAR param RIGHTPAR SEMICOLON LEFTBRACE statement . RIGHTBRACE

    RIGHTBRACE      shift and go to state 108


state 84

    (29) function -> functionType LEFTPAR RIGHTPAR SEMICOLON LEFTBRACE statement RIGHTBRACE .

    FUNCTION        reduce using rule 29 (function -> functionType LEFTPAR RIGHTPAR SEMICOLON LEFTBRACE statement RIGHTBRACE .)
    MAIN            reduce using rule 29 (function -> functionType LEFTPAR RIGHTPAR SEMICOLON LEFTBRACE statement RIGHTBRACE .)


state 85

    (37) cst_prim -> CST_CHAR .

    MULTIPLY        reduce using rule 37 (cst_prim -> CST_CHAR .)
    DIVIDE          reduce using rule 37 (cst_prim -> CST_CHAR .)
    PLUS            reduce using rule 37 (cst_prim -> CST_CHAR .)
    MINUS           reduce using rule 37 (cst_prim -> CST_CHAR .)
    COMA            reduce using rule 37 (cst_prim -> CST_CHAR .)
    RIGHTPAR        reduce using rule 37 (cst_prim -> CST_CHAR .)
    SEMICOLON       reduce using rule 37 (cst_prim -> CST_CHAR .)


state 86

    (47) exp -> term . expFunction
    (48) exp -> term .
    (49) expFunction -> . PLUS exp
    (50) expFunction -> . MINUS exp
    (51) expFunction -> .

  ! reduce/reduce conflict for RIGHTPAR resolved using rule 48 (exp -> term .)
  ! reduce/reduce conflict for COMA resolved using rule 48 (exp -> term .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 48 (exp -> term .)
    RIGHTPAR        reduce using rule 48 (exp -> term .)
    COMA            reduce using rule 48 (exp -> term .)
    SEMICOLON       reduce using rule 48 (exp -> term .)
    PLUS            shift and go to state 109
    MINUS           shift and go to state 111

  ! RIGHTPAR        [ reduce using rule 51 (expFunction -> .) ]
  ! COMA            [ reduce using rule 51 (expFunction -> .) ]
  ! SEMICOLON       [ reduce using rule 51 (expFunction -> .) ]

    expFunction                    shift and go to state 110

state 87

    (39) factor -> cst_prim .

    MULTIPLY        reduce using rule 39 (factor -> cst_prim .)
    DIVIDE          reduce using rule 39 (factor -> cst_prim .)
    PLUS            reduce using rule 39 (factor -> cst_prim .)
    MINUS           reduce using rule 39 (factor -> cst_prim .)
    RIGHTPAR        reduce using rule 39 (factor -> cst_prim .)
    COMA            reduce using rule 39 (factor -> cst_prim .)
    SEMICOLON       reduce using rule 39 (factor -> cst_prim .)


state 88

    (38) factor -> LEFTPAR . exp RIGHTPAR
    (47) exp -> . term expFunction
    (48) exp -> . term
    (42) term -> . factor termFunction
    (43) term -> . factor
    (38) factor -> . LEFTPAR exp RIGHTPAR
    (39) factor -> . cst_prim
    (40) factor -> . module
    (41) factor -> . ID
    (35) cst_prim -> . CST_INT
    (36) cst_prim -> . CST_FLOAT
    (37) cst_prim -> . CST_CHAR
    (72) module -> . ID LEFTPAR moduleFunction

    LEFTPAR         shift and go to state 88
    ID              shift and go to state 94
    CST_INT         shift and go to state 93
    CST_FLOAT       shift and go to state 89
    CST_CHAR        shift and go to state 85

    term                           shift and go to state 86
    cst_prim                       shift and go to state 87
    module                         shift and go to state 90
    exp                            shift and go to state 112
    factor                         shift and go to state 92

state 89

    (36) cst_prim -> CST_FLOAT .

    MULTIPLY        reduce using rule 36 (cst_prim -> CST_FLOAT .)
    DIVIDE          reduce using rule 36 (cst_prim -> CST_FLOAT .)
    PLUS            reduce using rule 36 (cst_prim -> CST_FLOAT .)
    MINUS           reduce using rule 36 (cst_prim -> CST_FLOAT .)
    COMA            reduce using rule 36 (cst_prim -> CST_FLOAT .)
    RIGHTPAR        reduce using rule 36 (cst_prim -> CST_FLOAT .)
    SEMICOLON       reduce using rule 36 (cst_prim -> CST_FLOAT .)


state 90

    (40) factor -> module .

    MULTIPLY        reduce using rule 40 (factor -> module .)
    DIVIDE          reduce using rule 40 (factor -> module .)
    PLUS            reduce using rule 40 (factor -> module .)
    MINUS           reduce using rule 40 (factor -> module .)
    RIGHTPAR        reduce using rule 40 (factor -> module .)
    COMA            reduce using rule 40 (factor -> module .)
    SEMICOLON       reduce using rule 40 (factor -> module .)


state 91

    (14) return -> RETURN LEFTPAR exp . RIGHTPAR

    RIGHTPAR        shift and go to state 113


state 92

    (42) term -> factor . termFunction
    (43) term -> factor .
    (44) termFunction -> . MULTIPLY term
    (45) termFunction -> . DIVIDE term
    (46) termFunction -> .

  ! reduce/reduce conflict for PLUS resolved using rule 43 (term -> factor .)
  ! reduce/reduce conflict for MINUS resolved using rule 43 (term -> factor .)
  ! reduce/reduce conflict for RIGHTPAR resolved using rule 43 (term -> factor .)
  ! reduce/reduce conflict for COMA resolved using rule 43 (term -> factor .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 43 (term -> factor .)
    PLUS            reduce using rule 43 (term -> factor .)
    MINUS           reduce using rule 43 (term -> factor .)
    RIGHTPAR        reduce using rule 43 (term -> factor .)
    COMA            reduce using rule 43 (term -> factor .)
    SEMICOLON       reduce using rule 43 (term -> factor .)
    MULTIPLY        shift and go to state 114
    DIVIDE          shift and go to state 115

  ! PLUS            [ reduce using rule 46 (termFunction -> .) ]
  ! MINUS           [ reduce using rule 46 (termFunction -> .) ]
  ! RIGHTPAR        [ reduce using rule 46 (termFunction -> .) ]
  ! COMA            [ reduce using rule 46 (termFunction -> .) ]
  ! SEMICOLON       [ reduce using rule 46 (termFunction -> .) ]

    termFunction                   shift and go to state 116

state 93

    (35) cst_prim -> CST_INT .

    MULTIPLY        reduce using rule 35 (cst_prim -> CST_INT .)
    DIVIDE          reduce using rule 35 (cst_prim -> CST_INT .)
    PLUS            reduce using rule 35 (cst_prim -> CST_INT .)
    MINUS           reduce using rule 35 (cst_prim -> CST_INT .)
    COMA            reduce using rule 35 (cst_prim -> CST_INT .)
    RIGHTPAR        reduce using rule 35 (cst_prim -> CST_INT .)
    SEMICOLON       reduce using rule 35 (cst_prim -> CST_INT .)


state 94

    (41) factor -> ID .
    (72) module -> ID . LEFTPAR moduleFunction

    MULTIPLY        reduce using rule 41 (factor -> ID .)
    DIVIDE          reduce using rule 41 (factor -> ID .)
    PLUS            reduce using rule 41 (factor -> ID .)
    MINUS           reduce using rule 41 (factor -> ID .)
    RIGHTPAR        reduce using rule 41 (factor -> ID .)
    COMA            reduce using rule 41 (factor -> ID .)
    SEMICOLON       reduce using rule 41 (factor -> ID .)
    LEFTPAR         shift and go to state 81


state 95

    (52) read -> READ LEFTPAR id_list . RIGHTPAR

    RIGHTPAR        shift and go to state 117


state 96

    (53) id_list -> ID . id_listFunction
    (54) id_listFunction -> . COMA id_list
    (55) id_listFunction -> .

    COMA            shift and go to state 118
    RIGHTPAR        reduce using rule 55 (id_listFunction -> .)

    id_listFunction                shift and go to state 119

state 97

    (56) print -> PRINT LEFTPAR printFunction . RIGHTPAR

    RIGHTPAR        shift and go to state 120


state 98

    (61) print_param -> CST_STRING .

    COMA            reduce using rule 61 (print_param -> CST_STRING .)
    RIGHTPAR        reduce using rule 61 (print_param -> CST_STRING .)


state 99

    (57) printFunction -> print_param . COMA printFunction2
    (58) printFunction -> print_param .

    COMA            shift and go to state 121
    RIGHTPAR        reduce using rule 58 (printFunction -> print_param .)


state 100

    (60) print_param -> exp .

    COMA            reduce using rule 60 (print_param -> exp .)
    RIGHTPAR        reduce using rule 60 (print_param -> exp .)


state 101

    (62) print_param -> ID .
    (41) factor -> ID .
    (72) module -> ID . LEFTPAR moduleFunction

  ! reduce/reduce conflict for COMA resolved using rule 41 (factor -> ID .)
  ! reduce/reduce conflict for RIGHTPAR resolved using rule 41 (factor -> ID .)
    MULTIPLY        reduce using rule 41 (factor -> ID .)
    DIVIDE          reduce using rule 41 (factor -> ID .)
    PLUS            reduce using rule 41 (factor -> ID .)
    MINUS           reduce using rule 41 (factor -> ID .)
    COMA            reduce using rule 41 (factor -> ID .)
    RIGHTPAR        reduce using rule 41 (factor -> ID .)
    LEFTPAR         shift and go to state 81

  ! COMA            [ reduce using rule 62 (print_param -> ID .) ]
  ! RIGHTPAR        [ reduce using rule 62 (print_param -> ID .) ]


state 102

    (9) declarationPrim -> primitive vars . SEMICOLON declarationPrim

    SEMICOLON       shift and go to state 122


state 103

    (7) assignment -> ID EQUAL exp . SEMICOLON

    SEMICOLON       shift and go to state 123


state 104

    (75) moduleFunction -> exp . COMA moduleFunction
    (76) moduleFunction -> exp . RIGHTPAR

    COMA            shift and go to state 124
    RIGHTPAR        shift and go to state 125


state 105

    (73) moduleFunction -> ID . COMA moduleFunction
    (74) moduleFunction -> ID . RIGHTPAR
    (41) factor -> ID .
    (72) module -> ID . LEFTPAR moduleFunction

  ! shift/reduce conflict for COMA resolved as shift
  ! shift/reduce conflict for RIGHTPAR resolved as shift
    COMA            shift and go to state 126
    RIGHTPAR        shift and go to state 127
    MULTIPLY        reduce using rule 41 (factor -> ID .)
    DIVIDE          reduce using rule 41 (factor -> ID .)
    PLUS            reduce using rule 41 (factor -> ID .)
    MINUS           reduce using rule 41 (factor -> ID .)
    LEFTPAR         shift and go to state 81

  ! COMA            [ reduce using rule 41 (factor -> ID .) ]
  ! RIGHTPAR        [ reduce using rule 41 (factor -> ID .) ]


state 106

    (72) module -> ID LEFTPAR moduleFunction .

    MULTIPLY        reduce using rule 72 (module -> ID LEFTPAR moduleFunction .)
    DIVIDE          reduce using rule 72 (module -> ID LEFTPAR moduleFunction .)
    PLUS            reduce using rule 72 (module -> ID LEFTPAR moduleFunction .)
    MINUS           reduce using rule 72 (module -> ID LEFTPAR moduleFunction .)
    COMA            reduce using rule 72 (module -> ID LEFTPAR moduleFunction .)
    RIGHTPAR        reduce using rule 72 (module -> ID LEFTPAR moduleFunction .)
    SEMICOLON       reduce using rule 72 (module -> ID LEFTPAR moduleFunction .)
    RETURN          reduce using rule 72 (module -> ID LEFTPAR moduleFunction .)
    IF              reduce using rule 72 (module -> ID LEFTPAR moduleFunction .)
    COMMENT_TEXT    reduce using rule 72 (module -> ID LEFTPAR moduleFunction .)
    READ            reduce using rule 72 (module -> ID LEFTPAR moduleFunction .)
    PRINT           reduce using rule 72 (module -> ID LEFTPAR moduleFunction .)
    ID              reduce using rule 72 (module -> ID LEFTPAR moduleFunction .)
    VAR             reduce using rule 72 (module -> ID LEFTPAR moduleFunction .)


state 107

    (15) if -> IF LEFTPAR exp . RIGHTPAR THEN LEFTBRACE statement RIGHTBRACE ifElse

    RIGHTPAR        shift and go to state 128


state 108

    (28) function -> functionType LEFTPAR param RIGHTPAR SEMICOLON LEFTBRACE statement RIGHTBRACE .

    FUNCTION        reduce using rule 28 (function -> functionType LEFTPAR param RIGHTPAR SEMICOLON LEFTBRACE statement RIGHTBRACE .)
    MAIN            reduce using rule 28 (function -> functionType LEFTPAR param RIGHTPAR SEMICOLON LEFTBRACE statement RIGHTBRACE .)


state 109

    (49) expFunction -> PLUS . exp
    (47) exp -> . term expFunction
    (48) exp -> . term
    (42) term -> . factor termFunction
    (43) term -> . factor
    (38) factor -> . LEFTPAR exp RIGHTPAR
    (39) factor -> . cst_prim
    (40) factor -> . module
    (41) factor -> . ID
    (35) cst_prim -> . CST_INT
    (36) cst_prim -> . CST_FLOAT
    (37) cst_prim -> . CST_CHAR
    (72) module -> . ID LEFTPAR moduleFunction

    LEFTPAR         shift and go to state 88
    ID              shift and go to state 94
    CST_INT         shift and go to state 93
    CST_FLOAT       shift and go to state 89
    CST_CHAR        shift and go to state 85

    term                           shift and go to state 86
    cst_prim                       shift and go to state 87
    module                         shift and go to state 90
    exp                            shift and go to state 129
    factor                         shift and go to state 92

state 110

    (47) exp -> term expFunction .

    RIGHTPAR        reduce using rule 47 (exp -> term expFunction .)
    COMA            reduce using rule 47 (exp -> term expFunction .)
    SEMICOLON       reduce using rule 47 (exp -> term expFunction .)


state 111

    (50) expFunction -> MINUS . exp
    (47) exp -> . term expFunction
    (48) exp -> . term
    (42) term -> . factor termFunction
    (43) term -> . factor
    (38) factor -> . LEFTPAR exp RIGHTPAR
    (39) factor -> . cst_prim
    (40) factor -> . module
    (41) factor -> . ID
    (35) cst_prim -> . CST_INT
    (36) cst_prim -> . CST_FLOAT
    (37) cst_prim -> . CST_CHAR
    (72) module -> . ID LEFTPAR moduleFunction

    LEFTPAR         shift and go to state 88
    ID              shift and go to state 94
    CST_INT         shift and go to state 93
    CST_FLOAT       shift and go to state 89
    CST_CHAR        shift and go to state 85

    term                           shift and go to state 86
    cst_prim                       shift and go to state 87
    module                         shift and go to state 90
    exp                            shift and go to state 130
    factor                         shift and go to state 92

state 112

    (38) factor -> LEFTPAR exp . RIGHTPAR

    RIGHTPAR        shift and go to state 131


state 113

    (14) return -> RETURN LEFTPAR exp RIGHTPAR .

    RIGHTBRACE      reduce using rule 14 (return -> RETURN LEFTPAR exp RIGHTPAR .)


state 114

    (44) termFunction -> MULTIPLY . term
    (42) term -> . factor termFunction
    (43) term -> . factor
    (38) factor -> . LEFTPAR exp RIGHTPAR
    (39) factor -> . cst_prim
    (40) factor -> . module
    (41) factor -> . ID
    (35) cst_prim -> . CST_INT
    (36) cst_prim -> . CST_FLOAT
    (37) cst_prim -> . CST_CHAR
    (72) module -> . ID LEFTPAR moduleFunction

    LEFTPAR         shift and go to state 88
    ID              shift and go to state 94
    CST_INT         shift and go to state 93
    CST_FLOAT       shift and go to state 89
    CST_CHAR        shift and go to state 85

    term                           shift and go to state 132
    cst_prim                       shift and go to state 87
    module                         shift and go to state 90
    factor                         shift and go to state 92

state 115

    (45) termFunction -> DIVIDE . term
    (42) term -> . factor termFunction
    (43) term -> . factor
    (38) factor -> . LEFTPAR exp RIGHTPAR
    (39) factor -> . cst_prim
    (40) factor -> . module
    (41) factor -> . ID
    (35) cst_prim -> . CST_INT
    (36) cst_prim -> . CST_FLOAT
    (37) cst_prim -> . CST_CHAR
    (72) module -> . ID LEFTPAR moduleFunction

    LEFTPAR         shift and go to state 88
    ID              shift and go to state 94
    CST_INT         shift and go to state 93
    CST_FLOAT       shift and go to state 89
    CST_CHAR        shift and go to state 85

    term                           shift and go to state 133
    cst_prim                       shift and go to state 87
    module                         shift and go to state 90
    factor                         shift and go to state 92

state 116

    (42) term -> factor termFunction .

    PLUS            reduce using rule 42 (term -> factor termFunction .)
    MINUS           reduce using rule 42 (term -> factor termFunction .)
    RIGHTPAR        reduce using rule 42 (term -> factor termFunction .)
    COMA            reduce using rule 42 (term -> factor termFunction .)
    SEMICOLON       reduce using rule 42 (term -> factor termFunction .)


state 117

    (52) read -> READ LEFTPAR id_list RIGHTPAR .

    RETURN          reduce using rule 52 (read -> READ LEFTPAR id_list RIGHTPAR .)
    IF              reduce using rule 52 (read -> READ LEFTPAR id_list RIGHTPAR .)
    COMMENT_TEXT    reduce using rule 52 (read -> READ LEFTPAR id_list RIGHTPAR .)
    READ            reduce using rule 52 (read -> READ LEFTPAR id_list RIGHTPAR .)
    PRINT           reduce using rule 52 (read -> READ LEFTPAR id_list RIGHTPAR .)
    ID              reduce using rule 52 (read -> READ LEFTPAR id_list RIGHTPAR .)
    VAR             reduce using rule 52 (read -> READ LEFTPAR id_list RIGHTPAR .)


state 118

    (54) id_listFunction -> COMA . id_list
    (53) id_list -> . ID id_listFunction

    ID              shift and go to state 96

    id_list                        shift and go to state 134

state 119

    (53) id_list -> ID id_listFunction .

    RIGHTPAR        reduce using rule 53 (id_list -> ID id_listFunction .)


state 120

    (56) print -> PRINT LEFTPAR printFunction RIGHTPAR .

    RETURN          reduce using rule 56 (print -> PRINT LEFTPAR printFunction RIGHTPAR .)
    IF              reduce using rule 56 (print -> PRINT LEFTPAR printFunction RIGHTPAR .)
    COMMENT_TEXT    reduce using rule 56 (print -> PRINT LEFTPAR printFunction RIGHTPAR .)
    READ            reduce using rule 56 (print -> PRINT LEFTPAR printFunction RIGHTPAR .)
    PRINT           reduce using rule 56 (print -> PRINT LEFTPAR printFunction RIGHTPAR .)
    ID              reduce using rule 56 (print -> PRINT LEFTPAR printFunction RIGHTPAR .)
    VAR             reduce using rule 56 (print -> PRINT LEFTPAR printFunction RIGHTPAR .)


state 121

    (57) printFunction -> print_param COMA . printFunction2
    (59) printFunction2 -> . printFunction
    (57) printFunction -> . print_param COMA printFunction2
    (58) printFunction -> . print_param
    (60) print_param -> . exp
    (61) print_param -> . CST_STRING
    (62) print_param -> . ID
    (47) exp -> . term expFunction
    (48) exp -> . term
    (42) term -> . factor termFunction
    (43) term -> . factor
    (38) factor -> . LEFTPAR exp RIGHTPAR
    (39) factor -> . cst_prim
    (40) factor -> . module
    (41) factor -> . ID
    (35) cst_prim -> . CST_INT
    (36) cst_prim -> . CST_FLOAT
    (37) cst_prim -> . CST_CHAR
    (72) module -> . ID LEFTPAR moduleFunction

    CST_STRING      shift and go to state 98
    ID              shift and go to state 101
    LEFTPAR         shift and go to state 88
    CST_INT         shift and go to state 93
    CST_FLOAT       shift and go to state 89
    CST_CHAR        shift and go to state 85

    printFunction                  shift and go to state 135
    term                           shift and go to state 86
    cst_prim                       shift and go to state 87
    module                         shift and go to state 90
    exp                            shift and go to state 100
    factor                         shift and go to state 92
    print_param                    shift and go to state 99
    printFunction2                 shift and go to state 136

state 122

    (9) declarationPrim -> primitive vars SEMICOLON . declarationPrim
    (9) declarationPrim -> . primitive vars SEMICOLON declarationPrim
    (10) declarationPrim -> .
    (11) primitive -> . INT
    (12) primitive -> . FLOAT
    (13) primitive -> . CHAR

    RETURN          reduce using rule 10 (declarationPrim -> .)
    IF              reduce using rule 10 (declarationPrim -> .)
    COMMENT_TEXT    reduce using rule 10 (declarationPrim -> .)
    READ            reduce using rule 10 (declarationPrim -> .)
    PRINT           reduce using rule 10 (declarationPrim -> .)
    ID              reduce using rule 10 (declarationPrim -> .)
    VAR             reduce using rule 10 (declarationPrim -> .)
    INT             shift and go to state 21
    FLOAT           shift and go to state 23
    CHAR            shift and go to state 24

    primitive                      shift and go to state 78
    declarationPrim                shift and go to state 137

state 123

    (7) assignment -> ID EQUAL exp SEMICOLON .

    RETURN          reduce using rule 7 (assignment -> ID EQUAL exp SEMICOLON .)
    IF              reduce using rule 7 (assignment -> ID EQUAL exp SEMICOLON .)
    COMMENT_TEXT    reduce using rule 7 (assignment -> ID EQUAL exp SEMICOLON .)
    READ            reduce using rule 7 (assignment -> ID EQUAL exp SEMICOLON .)
    PRINT           reduce using rule 7 (assignment -> ID EQUAL exp SEMICOLON .)
    ID              reduce using rule 7 (assignment -> ID EQUAL exp SEMICOLON .)
    VAR             reduce using rule 7 (assignment -> ID EQUAL exp SEMICOLON .)


state 124

    (75) moduleFunction -> exp COMA . moduleFunction
    (73) moduleFunction -> . ID COMA moduleFunction
    (74) moduleFunction -> . ID RIGHTPAR
    (75) moduleFunction -> . exp COMA moduleFunction
    (76) moduleFunction -> . exp RIGHTPAR
    (47) exp -> . term expFunction
    (48) exp -> . term
    (42) term -> . factor termFunction
    (43) term -> . factor
    (38) factor -> . LEFTPAR exp RIGHTPAR
    (39) factor -> . cst_prim
    (40) factor -> . module
    (41) factor -> . ID
    (35) cst_prim -> . CST_INT
    (36) cst_prim -> . CST_FLOAT
    (37) cst_prim -> . CST_CHAR
    (72) module -> . ID LEFTPAR moduleFunction

    ID              shift and go to state 105
    LEFTPAR         shift and go to state 88
    CST_INT         shift and go to state 93
    CST_FLOAT       shift and go to state 89
    CST_CHAR        shift and go to state 85

    term                           shift and go to state 86
    module                         shift and go to state 90
    cst_prim                       shift and go to state 87
    moduleFunction                 shift and go to state 138
    exp                            shift and go to state 104
    factor                         shift and go to state 92

state 125

    (76) moduleFunction -> exp RIGHTPAR .

    RETURN          reduce using rule 76 (moduleFunction -> exp RIGHTPAR .)
    IF              reduce using rule 76 (moduleFunction -> exp RIGHTPAR .)
    COMMENT_TEXT    reduce using rule 76 (moduleFunction -> exp RIGHTPAR .)
    READ            reduce using rule 76 (moduleFunction -> exp RIGHTPAR .)
    PRINT           reduce using rule 76 (moduleFunction -> exp RIGHTPAR .)
    ID              reduce using rule 76 (moduleFunction -> exp RIGHTPAR .)
    VAR             reduce using rule 76 (moduleFunction -> exp RIGHTPAR .)
    MULTIPLY        reduce using rule 76 (moduleFunction -> exp RIGHTPAR .)
    DIVIDE          reduce using rule 76 (moduleFunction -> exp RIGHTPAR .)
    PLUS            reduce using rule 76 (moduleFunction -> exp RIGHTPAR .)
    MINUS           reduce using rule 76 (moduleFunction -> exp RIGHTPAR .)
    RIGHTPAR        reduce using rule 76 (moduleFunction -> exp RIGHTPAR .)
    COMA            reduce using rule 76 (moduleFunction -> exp RIGHTPAR .)
    SEMICOLON       reduce using rule 76 (moduleFunction -> exp RIGHTPAR .)


state 126

    (73) moduleFunction -> ID COMA . moduleFunction
    (73) moduleFunction -> . ID COMA moduleFunction
    (74) moduleFunction -> . ID RIGHTPAR
    (75) moduleFunction -> . exp COMA moduleFunction
    (76) moduleFunction -> . exp RIGHTPAR
    (47) exp -> . term expFunction
    (48) exp -> . term
    (42) term -> . factor termFunction
    (43) term -> . factor
    (38) factor -> . LEFTPAR exp RIGHTPAR
    (39) factor -> . cst_prim
    (40) factor -> . module
    (41) factor -> . ID
    (35) cst_prim -> . CST_INT
    (36) cst_prim -> . CST_FLOAT
    (37) cst_prim -> . CST_CHAR
    (72) module -> . ID LEFTPAR moduleFunction

    ID              shift and go to state 105
    LEFTPAR         shift and go to state 88
    CST_INT         shift and go to state 93
    CST_FLOAT       shift and go to state 89
    CST_CHAR        shift and go to state 85

    term                           shift and go to state 86
    module                         shift and go to state 90
    cst_prim                       shift and go to state 87
    moduleFunction                 shift and go to state 139
    exp                            shift and go to state 104
    factor                         shift and go to state 92

state 127

    (74) moduleFunction -> ID RIGHTPAR .

    RETURN          reduce using rule 74 (moduleFunction -> ID RIGHTPAR .)
    IF              reduce using rule 74 (moduleFunction -> ID RIGHTPAR .)
    COMMENT_TEXT    reduce using rule 74 (moduleFunction -> ID RIGHTPAR .)
    READ            reduce using rule 74 (moduleFunction -> ID RIGHTPAR .)
    PRINT           reduce using rule 74 (moduleFunction -> ID RIGHTPAR .)
    ID              reduce using rule 74 (moduleFunction -> ID RIGHTPAR .)
    VAR             reduce using rule 74 (moduleFunction -> ID RIGHTPAR .)
    MULTIPLY        reduce using rule 74 (moduleFunction -> ID RIGHTPAR .)
    DIVIDE          reduce using rule 74 (moduleFunction -> ID RIGHTPAR .)
    PLUS            reduce using rule 74 (moduleFunction -> ID RIGHTPAR .)
    MINUS           reduce using rule 74 (moduleFunction -> ID RIGHTPAR .)
    RIGHTPAR        reduce using rule 74 (moduleFunction -> ID RIGHTPAR .)
    COMA            reduce using rule 74 (moduleFunction -> ID RIGHTPAR .)
    SEMICOLON       reduce using rule 74 (moduleFunction -> ID RIGHTPAR .)


state 128

    (15) if -> IF LEFTPAR exp RIGHTPAR . THEN LEFTBRACE statement RIGHTBRACE ifElse

    THEN            shift and go to state 140


state 129

    (49) expFunction -> PLUS exp .

    RIGHTPAR        reduce using rule 49 (expFunction -> PLUS exp .)
    COMA            reduce using rule 49 (expFunction -> PLUS exp .)
    SEMICOLON       reduce using rule 49 (expFunction -> PLUS exp .)


state 130

    (50) expFunction -> MINUS exp .

    RIGHTPAR        reduce using rule 50 (expFunction -> MINUS exp .)
    COMA            reduce using rule 50 (expFunction -> MINUS exp .)
    SEMICOLON       reduce using rule 50 (expFunction -> MINUS exp .)


state 131

    (38) factor -> LEFTPAR exp RIGHTPAR .

    MULTIPLY        reduce using rule 38 (factor -> LEFTPAR exp RIGHTPAR .)
    DIVIDE          reduce using rule 38 (factor -> LEFTPAR exp RIGHTPAR .)
    PLUS            reduce using rule 38 (factor -> LEFTPAR exp RIGHTPAR .)
    MINUS           reduce using rule 38 (factor -> LEFTPAR exp RIGHTPAR .)
    RIGHTPAR        reduce using rule 38 (factor -> LEFTPAR exp RIGHTPAR .)
    COMA            reduce using rule 38 (factor -> LEFTPAR exp RIGHTPAR .)
    SEMICOLON       reduce using rule 38 (factor -> LEFTPAR exp RIGHTPAR .)


state 132

    (44) termFunction -> MULTIPLY term .

    PLUS            reduce using rule 44 (termFunction -> MULTIPLY term .)
    MINUS           reduce using rule 44 (termFunction -> MULTIPLY term .)
    RIGHTPAR        reduce using rule 44 (termFunction -> MULTIPLY term .)
    COMA            reduce using rule 44 (termFunction -> MULTIPLY term .)
    SEMICOLON       reduce using rule 44 (termFunction -> MULTIPLY term .)


state 133

    (45) termFunction -> DIVIDE term .

    PLUS            reduce using rule 45 (termFunction -> DIVIDE term .)
    MINUS           reduce using rule 45 (termFunction -> DIVIDE term .)
    RIGHTPAR        reduce using rule 45 (termFunction -> DIVIDE term .)
    COMA            reduce using rule 45 (termFunction -> DIVIDE term .)
    SEMICOLON       reduce using rule 45 (termFunction -> DIVIDE term .)


state 134

    (54) id_listFunction -> COMA id_list .

    RIGHTPAR        reduce using rule 54 (id_listFunction -> COMA id_list .)


state 135

    (59) printFunction2 -> printFunction .

    RIGHTPAR        reduce using rule 59 (printFunction2 -> printFunction .)


state 136

    (57) printFunction -> print_param COMA printFunction2 .

    RIGHTPAR        reduce using rule 57 (printFunction -> print_param COMA printFunction2 .)


state 137

    (9) declarationPrim -> primitive vars SEMICOLON declarationPrim .

    RETURN          reduce using rule 9 (declarationPrim -> primitive vars SEMICOLON declarationPrim .)
    IF              reduce using rule 9 (declarationPrim -> primitive vars SEMICOLON declarationPrim .)
    COMMENT_TEXT    reduce using rule 9 (declarationPrim -> primitive vars SEMICOLON declarationPrim .)
    READ            reduce using rule 9 (declarationPrim -> primitive vars SEMICOLON declarationPrim .)
    PRINT           reduce using rule 9 (declarationPrim -> primitive vars SEMICOLON declarationPrim .)
    ID              reduce using rule 9 (declarationPrim -> primitive vars SEMICOLON declarationPrim .)
    VAR             reduce using rule 9 (declarationPrim -> primitive vars SEMICOLON declarationPrim .)


state 138

    (75) moduleFunction -> exp COMA moduleFunction .

    RETURN          reduce using rule 75 (moduleFunction -> exp COMA moduleFunction .)
    IF              reduce using rule 75 (moduleFunction -> exp COMA moduleFunction .)
    COMMENT_TEXT    reduce using rule 75 (moduleFunction -> exp COMA moduleFunction .)
    READ            reduce using rule 75 (moduleFunction -> exp COMA moduleFunction .)
    PRINT           reduce using rule 75 (moduleFunction -> exp COMA moduleFunction .)
    ID              reduce using rule 75 (moduleFunction -> exp COMA moduleFunction .)
    VAR             reduce using rule 75 (moduleFunction -> exp COMA moduleFunction .)
    MULTIPLY        reduce using rule 75 (moduleFunction -> exp COMA moduleFunction .)
    DIVIDE          reduce using rule 75 (moduleFunction -> exp COMA moduleFunction .)
    PLUS            reduce using rule 75 (moduleFunction -> exp COMA moduleFunction .)
    MINUS           reduce using rule 75 (moduleFunction -> exp COMA moduleFunction .)
    RIGHTPAR        reduce using rule 75 (moduleFunction -> exp COMA moduleFunction .)
    COMA            reduce using rule 75 (moduleFunction -> exp COMA moduleFunction .)
    SEMICOLON       reduce using rule 75 (moduleFunction -> exp COMA moduleFunction .)


state 139

    (73) moduleFunction -> ID COMA moduleFunction .

    RETURN          reduce using rule 73 (moduleFunction -> ID COMA moduleFunction .)
    IF              reduce using rule 73 (moduleFunction -> ID COMA moduleFunction .)
    COMMENT_TEXT    reduce using rule 73 (moduleFunction -> ID COMA moduleFunction .)
    READ            reduce using rule 73 (moduleFunction -> ID COMA moduleFunction .)
    PRINT           reduce using rule 73 (moduleFunction -> ID COMA moduleFunction .)
    ID              reduce using rule 73 (moduleFunction -> ID COMA moduleFunction .)
    VAR             reduce using rule 73 (moduleFunction -> ID COMA moduleFunction .)
    MULTIPLY        reduce using rule 73 (moduleFunction -> ID COMA moduleFunction .)
    DIVIDE          reduce using rule 73 (moduleFunction -> ID COMA moduleFunction .)
    PLUS            reduce using rule 73 (moduleFunction -> ID COMA moduleFunction .)
    MINUS           reduce using rule 73 (moduleFunction -> ID COMA moduleFunction .)
    RIGHTPAR        reduce using rule 73 (moduleFunction -> ID COMA moduleFunction .)
    COMA            reduce using rule 73 (moduleFunction -> ID COMA moduleFunction .)
    SEMICOLON       reduce using rule 73 (moduleFunction -> ID COMA moduleFunction .)


state 140

    (15) if -> IF LEFTPAR exp RIGHTPAR THEN . LEFTBRACE statement RIGHTBRACE ifElse

    LEFTBRACE       shift and go to state 141


state 141

    (15) if -> IF LEFTPAR exp RIGHTPAR THEN LEFTBRACE . statement RIGHTBRACE ifElse
    (63) statement -> . return
    (64) statement -> . if statementFunction
    (65) statement -> . comment statementFunction
    (66) statement -> . read statementFunction
    (67) statement -> . print statementFunction
    (68) statement -> . assignment statementFunction
    (69) statement -> . declaration statementFunction
    (70) statement -> . module statementFunction
    (14) return -> . RETURN LEFTPAR exp RIGHTPAR
    (15) if -> . IF LEFTPAR exp RIGHTPAR THEN LEFTBRACE statement RIGHTBRACE ifElse
    (18) comment -> . COMMENT_TEXT
    (52) read -> . READ LEFTPAR id_list RIGHTPAR
    (56) print -> . PRINT LEFTPAR printFunction RIGHTPAR
    (7) assignment -> . ID EQUAL exp SEMICOLON
    (8) declaration -> . VAR declarationPrim
    (72) module -> . ID LEFTPAR moduleFunction

    RETURN          shift and go to state 48
    IF              shift and go to state 62
    COMMENT_TEXT    shift and go to state 53
    READ            shift and go to state 49
    PRINT           shift and go to state 51
    ID              shift and go to state 61
    VAR             shift and go to state 60

    comment                        shift and go to state 47
    return                         shift and go to state 56
    read                           shift and go to state 57
    assignment                     shift and go to state 58
    module                         shift and go to state 50
    statement                      shift and go to state 142
    declaration                    shift and go to state 59
    print                          shift and go to state 55
    if                             shift and go to state 52

state 142

    (15) if -> IF LEFTPAR exp RIGHTPAR THEN LEFTBRACE statement . RIGHTBRACE ifElse

    RIGHTBRACE      shift and go to state 143


state 143

    (15) if -> IF LEFTPAR exp RIGHTPAR THEN LEFTBRACE statement RIGHTBRACE . ifElse
    (16) ifElse -> . ELSE LEFTBRACE statement RIGHTBRACE
    (17) ifElse -> .

    ELSE            shift and go to state 145
    RETURN          reduce using rule 17 (ifElse -> .)
    IF              reduce using rule 17 (ifElse -> .)
    COMMENT_TEXT    reduce using rule 17 (ifElse -> .)
    READ            reduce using rule 17 (ifElse -> .)
    PRINT           reduce using rule 17 (ifElse -> .)
    ID              reduce using rule 17 (ifElse -> .)
    VAR             reduce using rule 17 (ifElse -> .)

    ifElse                         shift and go to state 144

state 144

    (15) if -> IF LEFTPAR exp RIGHTPAR THEN LEFTBRACE statement RIGHTBRACE ifElse .

    RETURN          reduce using rule 15 (if -> IF LEFTPAR exp RIGHTPAR THEN LEFTBRACE statement RIGHTBRACE ifElse .)
    IF              reduce using rule 15 (if -> IF LEFTPAR exp RIGHTPAR THEN LEFTBRACE statement RIGHTBRACE ifElse .)
    COMMENT_TEXT    reduce using rule 15 (if -> IF LEFTPAR exp RIGHTPAR THEN LEFTBRACE statement RIGHTBRACE ifElse .)
    READ            reduce using rule 15 (if -> IF LEFTPAR exp RIGHTPAR THEN LEFTBRACE statement RIGHTBRACE ifElse .)
    PRINT           reduce using rule 15 (if -> IF LEFTPAR exp RIGHTPAR THEN LEFTBRACE statement RIGHTBRACE ifElse .)
    ID              reduce using rule 15 (if -> IF LEFTPAR exp RIGHTPAR THEN LEFTBRACE statement RIGHTBRACE ifElse .)
    VAR             reduce using rule 15 (if -> IF LEFTPAR exp RIGHTPAR THEN LEFTBRACE statement RIGHTBRACE ifElse .)


state 145

    (16) ifElse -> ELSE . LEFTBRACE statement RIGHTBRACE

    LEFTBRACE       shift and go to state 146


state 146

    (16) ifElse -> ELSE LEFTBRACE . statement RIGHTBRACE
    (63) statement -> . return
    (64) statement -> . if statementFunction
    (65) statement -> . comment statementFunction
    (66) statement -> . read statementFunction
    (67) statement -> . print statementFunction
    (68) statement -> . assignment statementFunction
    (69) statement -> . declaration statementFunction
    (70) statement -> . module statementFunction
    (14) return -> . RETURN LEFTPAR exp RIGHTPAR
    (15) if -> . IF LEFTPAR exp RIGHTPAR THEN LEFTBRACE statement RIGHTBRACE ifElse
    (18) comment -> . COMMENT_TEXT
    (52) read -> . READ LEFTPAR id_list RIGHTPAR
    (56) print -> . PRINT LEFTPAR printFunction RIGHTPAR
    (7) assignment -> . ID EQUAL exp SEMICOLON
    (8) declaration -> . VAR declarationPrim
    (72) module -> . ID LEFTPAR moduleFunction

    RETURN          shift and go to state 48
    IF              shift and go to state 62
    COMMENT_TEXT    shift and go to state 53
    READ            shift and go to state 49
    PRINT           shift and go to state 51
    ID              shift and go to state 61
    VAR             shift and go to state 60

    comment                        shift and go to state 47
    return                         shift and go to state 56
    read                           shift and go to state 57
    assignment                     shift and go to state 58
    module                         shift and go to state 50
    statement                      shift and go to state 147
    declaration                    shift and go to state 59
    print                          shift and go to state 55
    if                             shift and go to state 52

state 147

    (16) ifElse -> ELSE LEFTBRACE statement . RIGHTBRACE

    RIGHTBRACE      shift and go to state 148


state 148

    (16) ifElse -> ELSE LEFTBRACE statement RIGHTBRACE .

    RETURN          reduce using rule 16 (ifElse -> ELSE LEFTBRACE statement RIGHTBRACE .)
    IF              reduce using rule 16 (ifElse -> ELSE LEFTBRACE statement RIGHTBRACE .)
    COMMENT_TEXT    reduce using rule 16 (ifElse -> ELSE LEFTBRACE statement RIGHTBRACE .)
    READ            reduce using rule 16 (ifElse -> ELSE LEFTBRACE statement RIGHTBRACE .)
    PRINT           reduce using rule 16 (ifElse -> ELSE LEFTBRACE statement RIGHTBRACE .)
    ID              reduce using rule 16 (ifElse -> ELSE LEFTBRACE statement RIGHTBRACE .)
    VAR             reduce using rule 16 (ifElse -> ELSE LEFTBRACE statement RIGHTBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for COMA in state 105 resolved as shift
WARNING: shift/reduce conflict for RIGHTPAR in state 105 resolved as shift
WARNING: reduce/reduce conflict in state 86 resolved using rule (exp -> term)
WARNING: rejected rule (expFunction -> <empty>) in state 86
WARNING: reduce/reduce conflict in state 92 resolved using rule (term -> factor)
WARNING: rejected rule (termFunction -> <empty>) in state 92
WARNING: reduce/reduce conflict in state 101 resolved using rule (factor -> ID)
WARNING: rejected rule (print_param -> ID) in state 101
WARNING: Rule (expFunction -> <empty>) is never reduced
WARNING: Rule (termFunction -> <empty>) is never reduced
WARNING: Rule (print_param -> ID) is never reduced
